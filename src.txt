class Solution {
    private static final int MOD = 1_000_000_007;

    public int numberOfPermutations(int n, int[][] requirements) {
        // Step 1: Store requirements in a map
        int[] req = new int[n + 1];
        Arrays.fill(req, -1);
        for (int[] r : requirements) {
            req[r[0] + 1] = r[1]; // +1 because we'll use 1-based length
        }

        // Maximum possible inversions for n elements
        int maxInv = n * (n - 1) / 2;
        int[][] dp = new int[n + 1][maxInv + 1];

        dp[0][0] = 1;

        for (int i = 1; i <= n; i++) {
            int maxI = i * (i - 1) / 2;

            int[] prefix = new int[maxI + 1];
            prefix[0] = dp[i - 1][0];

            for (int j = 1; j <= maxI; j++) {
                prefix[j] = (prefix[j - 1] + (j < dp[i - 1].length ? dp[i - 1][j] : 0)) % MOD;
            }

            for (int j = 0; j <= maxI; j++) {
                int left = j - Math.min(i - 1, j);
                int right = j;

                dp[i][j] = prefix[right];
                if (left > 0) dp[i][j] = (dp[i][j] - prefix[left - 1] + MOD) % MOD;
            }

            // Apply requirement filter for this prefix
            if (req[i] != -1) {
                for (int j = 0; j <= maxI; j++) {
                    if (j != req[i]) dp[i][j] = 0;
                }
            }
        }

        // Sum all valid permutations of length n
        long ans = 0;
        for (int val : dp[n]) ans = (ans + val) % MOD;
        return (int) ans;
    }
}
